<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SubSys_SimDriving</name>
    </assembly>
    <members>
        <member name="M:SubSys_SimDriving.WayFactory.BuildOneWay(System.Drawing.Point,System.Drawing.Point,System.Int32,System.Int32,System.Int32)">
            <summary>
            创建单方向道路
            </summary>
            <param name="roadNodeFrom"></param>
            <param name="roadNodeTo"></param>
            <param name="iLeftCount">左转车道数目</param>
            <param name="iStraightCount">直行车道数</param>
            <param name="iRightCount">右转车道数</param>
            <returns></returns>
        </member>
        <member name="M:SubSys_SimDriving.WayFactory.BuildTwoWay(SubSys_SimDriving.TrafficModel.Way,System.Int32,System.Int32,System.Int32)">
            <summary>
            创建对称的两个RoadEdge，里面的车道数量由参数指定
            </summary>
            <param name="iLeftCount"></param>
            <param name="iStraightCount"></param>
            <param name="iRightCount"></param>
            <returns></returns>
        </member>
        <member name="T:SubSys_SimDriving.BuildCommand">
            <summary>
            抽象创建命令的类
            </summary>
        </member>
        <member name="T:SubSys_SimDriving.Agents.AbstractAgent">
            <summary>
            这个是访问者模式的抽象visitor，各种各样的visit（update）
            </summary>
        </member>
        <member name="F:SubSys_SimDriving.Agents.AbstractAgent.simContext">
            <summary>
            被访问对象
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.Agents.AbstractAgent.VisitUpdate(SubSys_SimDriving.TrafficModel.Way)">
            <summary>
            visit实际进行访问的地方
            </summary>
        </member>
        <member name="T:SubSys_SimDriving.Agents.UpdateAgentChain">
            有一个储存AgentName或者是AgentId的列表，
            由于规则不是很多。不使用哈希表，这些
            规则如交通灯规则，加减速规则等
        </member>
        <member name="T:SubSys_SimDriving.AbstractChain`1">
            <summary>
            所有非哈希表的基类型，如果使用该类内部的list保存数据，应当由调用类进行
            仿真上下文同步
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:SubSys_SimDriving.Agents.AsynchronicAgents">
            <summary>
            异步更新规则一个时间步长只更新一个的规则,不应当使用无参数的构造函数创建该类
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.Agents.SignalLightAgent.VisitUpdate(SubSys_SimDriving.TrafficModel.XNode)">
            <summary>
            信号灯更新的方法
            </summary>
            <param name="rN"></param>
        </member>
        <member name="T:SubSys_SimDriving.Agents.SynchronicAgents">
            <summary>
            同步更新规则，一个时间步长内全部更新的规则，不应当使用无参数的构造函数创建该类
            </summary>
        </member>
        <member name="F:SubSys_SimDriving.TrafficModel.XNodeDriveStrategy.iDesiredSpeed">
            <summary>
            城市路网中，三个元胞.交叉口的期望速度
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.XNodeDriveStrategy.ShiftLane(SubSys_SimDriving.TrafficModel.RunCtx)">
            <summary>
            用来临时存储状态，三种状态的修改等于是修改其克隆副本
            最终是要修改和反映到cell中的
            </summary>
        </member>
        <member name="F:SubSys_SimDriving.TrafficModel.WayDriveStrategy.iDesiredSpeed">
            <summary>
            城市路段的期望速度
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.WayDriveStrategy.ShiftLane(SubSys_SimDriving.TrafficModel.RunCtx)">
            <summary>
            换道的几种原因，1.由于路口转向必须换道，
            2.由于寻求合适的理想行驶状态
            </summary>
        </member>
        <member name="T:SubSys_SimDriving.TrafficModel.DriveStrategy">
            <summary>
            驾驶员的驾驶行为策略，每个mobileebtity驾驶员行为不一样,享元模式
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.DriveStrategy.Drive(SubSys_SimDriving.TrafficEntity,SubSys_SimDriving.TrafficModel.Cell)">
            <summary>
            边界为红绿灯的地方是不更新和移动的或者做判断
            </summary>
        </member>
        <member name="T:SubSys_SimDriving.TrafficModel.Edge">
            <summary>
            用来表示道路一条边的数据结构
            </summary>
        </member>
        <member name="T:SubSys_SimDriving.TrafficModel.GridNode">
             <summary>
            节点则抽象成Node类，一个节点上挂着以此节点作为起点的“出边”表。
             </summary>
        </member>
        <member name="T:SubSys_SimDriving.TrafficModel.PassedPath">
            <summary>
            PassedPath 用于缓存计算过程中的到达某个节点的权值最小的路径
            </summary>
        </member>
        <member name="T:SubSys_SimDriving.TrafficModel.PlanCourse">
            <summary>
            PlanCourse 缓存从源节点到其它任一节点的最小权值路径＝》路径表
            </summary>
        </member>
        <member name="T:SubSys_SimDriving.TrafficModel.RoutePlanner">
            <summary>
            RoutePlanner 提供图算法中常用的路径规划功能。
            2005.09.06
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.RoutePlan.Route`1.FindNext(`0)">
            <summary>
            找到当前目标的下一个目标
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SubSys_SimDriving.RoutePlan.EdgeRoute.GetSwerve(SubSys_SimDriving.TrafficModel.Way)">
            <summary>
            返回下一步要前进的方向,-1表示左转 0表示直行 1表示右转，2表示掉头
            </summary>
            <param name="re">当前车辆所在的道路</param>
            <returns></returns>
        </member>
        <member name="M:SubSys_SimDriving.RoutePlan.RouteChoiceMaker.Select(SubSys_SimDriving.RoutePlan.EdgeRoute,SubSys_SimDriving.RoutePlan.EdgeRoute)">
            <summary>
            使用离散选择模型中的logit模型进行路径的选择。
            返回1代表选择路径A，返回2代表选择路径B
            </summary>
            <returns></returns>
        </member>
        <member name="T:SubSys_SimDriving.SysSimContext.Service.IService">
            <summary>
            观察者接口
            </summary>
        </member>
        <member name="F:SubSys_SimDriving.SysSimContext.Service.Service.IsServiceUp">
            <summary>
            服务运行的开关变量
            </summary>
        </member>
        <member name="P:SubSys_SimDriving.SysSimContext.Service.Service.IsRunning">
            <summary>
            如果全局开关关闭则一定返回false
            </summary>
        </member>
        <member name="T:SubSys_SimDriving.SysSimContext.Service.EventAttachService">
            <summary>
            也不是所有的实体都有EventAttacherLogger。需要注册并且实现
            </summary>
        </member>
        <member name="T:SubSys_SimDriving.SysSimContext.CarModelHTable">
            利用这个哈希表查询到要查询的车辆的Id
            然后找到车辆的RouteID，
            然后查询RoadSegHastTable找到每辆车
            在每个路段的信息
        </member>
        <member name="T:SubSys_SimDriving.SysSimContext.StaticSysTable`2">
            <summary>
            可以做用作的一维索引哈希表（Tvalue是类型），也可以做二维索引哈希表（Tvalue是集合）
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:SubSys_SimDriving.SysSimContext.RoadNodeHTable">
            <summary>
            不继承自staticSystable
            </summary>
        </member>
        <member name="P:SubSys_SimDriving.SysSimContext.ISimContext.DataRecorder">
            <summary>
            记录态哈希表
            </summary>
        </member>
        <member name="T:SubSys_SimDriving.SysSimContext.SimContext">
            <summary>
            单例模式，关于注册，所有注册之前应当检查是否已经注册过了
            应当由roadnetwork承担一部分的工厂责任，外界不应显式的调用注册，
            注册服务对外部组件是透明的，注册使用请求/拒绝模型,注册应当统一使用服务实现
            simContext内部所有注册数据应当对外是可读的，不可以修改的
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.SysSimContext.SimContext.#ctor">
             <summary>
            单例模式 防止直接调用接口生成该类别
             </summary>
        </member>
        <member name="F:SubSys_SimDriving.SysSimContext.SimContext._DataRecorder">
            <summary>
            记录态哈希表
            </summary>
        </member>
        <member name="P:SubSys_SimDriving.SysSimContext.SimContext.iCurrTimeStep">
            <summary>
            仿真运行的时间步骤
            </summary>
        </member>
        <member name="P:SubSys_SimDriving.SysSimContext.SimContext.SubSys_SimDriving#SysSimContext#ISimContext#iCurrTimeStep">
            <summary>
            单例模式
            </summary>
        </member>
        <member name="P:SubSys_SimDriving.SysSimContext.SimContext.SubSys_SimDriving#SysSimContext#ISimContext#RoadNet">
            <summary>
            表示运行时建立的路网的结构，里面包含了对RoadNodeList和RoadEdgeList的引用
            </summary>
        </member>
        <member name="T:SubSys_SimDriving.SysSimContext.DataRecorder`2">
            <summary>
            抽象类
            </summary>
        </member>
        <member name="T:SubSys_SimDriving.SysSimContext.CarInfoDic">
            <summary>
            最内层哈希表，保存车辆的信息。利用车辆哈希进行索引
            </summary>
        </member>
        <member name="T:SubSys_SimDriving.SysSimContext.EntityDic">
            <summary>
            哈表索引树，次内层，保存一个路段上的车辆信息，利用路段哈希进行索引
            针对换道问题。可以增加车辆在哪个车道的记录
            </summary>
        </member>
        <member name="F:SubSys_SimDriving.SysSimContext.SimSettings.iMaxLanes">
            <summary>
            交叉口的最大元胞数，等于Roadedge内部可以容纳的最大车道数量
            </summary>
        </member>
        <member name="F:SubSys_SimDriving.SysSimContext.SimSettings.iCellWidth">
            <summary>
            元胞车辆的宽度是2米这个与GIS坐标进行转化的时候使用
            </summary>
        </member>
        <member name="F:SubSys_SimDriving.SysSimContext.SimSettings.iSafeHeadWay">
            <summary>
            安全车头时距
            </summary>
        </member>
        <member name="F:SubSys_SimDriving.SysSimContext.SimSettings.iExtendLength">
            <summary>
            展宽渐变段的长度为10个元胞，60米
            </summary>
        </member>
        <member name="F:SubSys_SimDriving.SysSimContext.SimSettings.iCarWidth">
            <summary>
            表示标准小汽车宽度的元胞个数
            </summary>
        </member>
        <member name="F:SubSys_SimDriving.SysSimContext.SimSettings.iCarLength">
            <summary>
            表示标准小汽车长度的元胞个数
            </summary>
        </member>
        <member name="T:SubSys_SimDriving.TrafficModel.Car">
            <summary>
            过时的，为了保持兼容，建议使用新的类型。
            </summary>
        </member>
        <member name="T:SubSys_SimDriving.MobileEntity">
            <summary>
            所有会动的物体的基类形
            </summary>
        </member>
        <member name="T:SubSys_SimDriving.TrafficEntity">
            <summary>
            观察者模式中的subject被观察者
            </summary>
            <summary>
            2015年1月19日更新，新增加的内容。
            </summary>
        </member>
        <member name="P:SubSys_SimDriving.ITrafficEntity.ISimCtx">
            <summary>
            仿真运行的静态数据，交通实体运行的数据环境，包括各种仿真系统运行需要的数据结构
            </summary>
        </member>
        <member name="P:SubSys_SimDriving.ITrafficEntity.Container">
            <summary>
            容器交通实体，如道路是路段的容器。路段是车道的容器
            </summary>
        </member>
        <member name="P:SubSys_SimDriving.ITrafficEntity.EntityType">
            <summary>
            交通实体的类型，VMS，Car，TrafficLight 等
            </summary>
        </member>
        <member name="P:SubSys_SimDriving.ITrafficEntity.Grid">
            <summary>
            交通实体的元胞坐标系，相对于容器实体或者其他
            </summary>
        </member>
        <member name="P:SubSys_SimDriving.ITrafficEntity.GISPosition">
            <summary>
            相对于GIS的绝对坐标
            </summary>
        </member>
        <member name="P:SubSys_SimDriving.ITrafficEntity.Shape">
            <summary>
            交通实体的GIS坐标转换为元胞坐标之后的形状曲线,该属性是将交通实体与GIS集成的关键
            交通实体的形状可以是曲线，利用GDI画曲线函数进行渲染，不再局限于直线形状
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.TrafficEntity.InvokeService(SubSys_SimDriving.ITrafficEntity)">
            <summary>
            调用服务的功能
            </summary>
            <param name="te"></param>
        </member>
        <member name="M:SubSys_SimDriving.TrafficEntity.RemoveService(SubSys_SimDriving.SysSimContext.Service.IService)">
            <summary>
            删除交通实体要使用的服务
            </summary>
            <param name="ils"></param>
        </member>
        <member name="M:SubSys_SimDriving.TrafficEntity.Register">
            <summary>
            向simContext 报道类的创建行为
            </summary>
        </member>
        <member name="F:SubSys_SimDriving.TrafficEntity.asynAgents">
            <summary>
            存储边上定义的异步更新的规则
            </summary>
        </member>
        <member name="F:SubSys_SimDriving.TrafficEntity.synAgents">
            <summary>
            存储边上定义的同步更新的规则
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.TrafficEntity.UpdateStatus">
            <summary>
            过时的，原有的调用函数、调用所有的访问者，进行内部元胞的更新
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.TrafficEntity.AcceptSynAgent(SubSys_SimDriving.Agents.AbstractAgent)">
             <summary>
            RoadEdge是item ，Agent是visitor 相当于item.accept(visitor)
             </summary>
             <param name="ur"></param>
        </member>
        <member name="M:SubSys_SimDriving.TrafficEntity.AcceptAsynAgent(SubSys_SimDriving.Agents.AbstractAgent)">
            <summary>
            添加异步更新规则
            </summary>
            <param name="ur"></param>
        </member>
        <member name="M:SubSys_SimDriving.TrafficEntity.Update">
            <summary>
            用来替代updatestatus
            </summary>
        </member>
        <member name="P:SubSys_SimDriving.TrafficEntity.Grid">
            <summary>
            元胞坐标系,过时，建议使用spaceGrid
            </summary>
        </member>
        <member name="P:SubSys_SimDriving.TrafficEntity.iWidth">
            <summary>
            用元胞个数计算的实体的宽度，实际宽度等于iWidth*元胞代表的距离
            </summary>
        </member>
        <member name="P:SubSys_SimDriving.TrafficEntity.iLength">
            <summary>
            用元胞个数计算的实体的长度。实际长度等于iLength*元胞代表的距离
            </summary>
        </member>
        <member name="P:SubSys_SimDriving.TrafficEntity.ISimCtx">
            <summary>
            对于RoadNode该坐标为以元胞长度为单位的相对坐标，该坐标为屏幕坐标
            除以元胞的GUI长度
            对于RoadLane和RoadEdge以及Cell，该坐标X为相对于起点RoadNode的元胞个数
            Y为相对于起点RoadNode的偏移（即第几个车道）
            </summary>
        </member>
        <member name="P:SubSys_SimDriving.TrafficEntity.GISPosition">
            <summary>
            未来兼容GIS系统预留的GIS坐标系
            </summary>
        </member>
        <member name="P:SubSys_SimDriving.TrafficEntity.Shape">
            <summary>
            子类应当重写这个属性\用于GUI画图的属性
            </summary>
        </member>
        <member name="P:SubSys_SimDriving.TrafficEntity.Name">
            <summary>
            交通实体的名称、道路名、交叉口名等
            </summary>
        </member>
        <member name="P:SubSys_SimDriving.TrafficEntity.SpatialGrid">
            <summary>
            3d元胞空间，为了扩展GIS做准备
            </summary>
        </member>
        <member name="F:SubSys_SimDriving.MobileEntity.iSpeed">
            <summary>
            当前车辆的速度
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.MobileEntity.Clone">
            <summary>
            对象拷贝和值拷贝
            </summary>
            <returns></returns>
        </member>
        <member name="F:SubSys_SimDriving.MobileEntity.iAcc">
            <summary>
            当前车辆的加速度
            </summary>
        </member>
        <member name="F:SubSys_SimDriving.MobileEntity.iTimeStep">
            <summary>
            用作记录态哈希表记录车辆的时间信息，以及用来确定什么时候进入路段
            </summary>
        </member>
        <member name="F:SubSys_SimDriving.MobileEntity.Track">
            <summary>
            包围在交叉口内部的节点,内部点使用绝对坐标系
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.MobileEntity.TrackMove(System.Int32)">
            <summary>
            使用在交叉口上
            </summary>
            <param name="iStep"></param>
        </member>
        <member name="M:SubSys_SimDriving.MobileEntity.CalcTrack(System.Int32)">
            <summary>
            只应当在转换的时候调用一次，寻找轨迹的一个东西，从起始位置出发，前进iAheadSpace个间距时距
            </summary>
            <param name="iAheadSpace"></param>
        </member>
        <member name="M:SubSys_SimDriving.MobileEntity.GetEntityGap(System.Int32@,System.Int32@)">
            <summary>
            这个函数需要重新写，计算当前元胞可以前进的车头时距
            </summary>
            <param name="iEntityGap"></param>
            <param name="iToEntityGap"></param>
        </member>
        <member name="M:SubSys_SimDriving.MobileEntity.GetTrackGap(SubSys_SimDriving.TrafficModel.XNode,System.Drawing.Point,System.Int32@)">
            <summary>
            计算元胞在交叉口内部可以走多少步
            </summary>
            <param name="rN"></param>
            <param name="ct"></param>
            <returns></returns>
        </member>
        <member name="F:SubSys_SimDriving.TrafficModel.Car.iAcc">
            <summary>
            当前车辆的加速度
            </summary>
        </member>
        <member name="T:SubSys_SimDriving.TrafficModel.Bus">
            <summary>
            公共汽车，占用4个元胞网格 。12米的，取决于元胞网格的空间大小
            </summary>
        </member>
        <member name="T:SubSys_SimDriving.TrafficModel.LargeTruck">
            <summary>
            大卡车，占用4个元胞网格
            </summary>
        </member>
        <member name="T:SubSys_SimDriving.TrafficModel.Pedastrain">
            <summary>
            行人，一般占用1个元胞网格
            </summary>
        </member>
        <member name="T:SubSys_DataManage.MobileFactory">
            <summary>
            汽车工厂
            </summary>
        </member>
        <member name="T:SubSys_SimDriving.TrafficModel.Cell">
            <summary>
            程序的GUI可能要求使用对象的坐标来查询路段顶点的位置，采用对象的position用作
            </summary>
            <typeparam name="T">int</typeparam>
            <summary>
            2015年1月9日，重新修改基础原理，增加空间属性，该类型有太多车辆的行为，将由不同的Mobile代替。实现仿真软件对大车、中型车、小型车的仿真支持
            </summary>
        </member>
        <member name="F:SubSys_SimDriving.TrafficModel.Cell.iTimeStep">
            <summary>
            用作记录态哈希表记录车辆的时间信息，以及用来确定什么时候进入路段
            </summary>
        </member>
        <member name="F:SubSys_SimDriving.TrafficModel.Cell.nextCell">
            <summary>
            使用链式结构支持快速下游访问
            </summary>
        </member>
        <member name="F:SubSys_SimDriving.TrafficModel.Cell.Car">
            <summary>
            代表的车辆模型
            </summary>
        </member>
        <member name="F:SubSys_SimDriving.TrafficModel.Cell.Track">
            <summary>
            包围在交叉口内部的节点,内部点使用绝对坐标系
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.Cell.TrackMove(System.Int32)">
            <summary>
            使用在交叉口上
            </summary>
            <param name="iStep"></param>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.Cell.CalcTrack(System.Int32)">
            <summary>
            只应当在转换的时候调用一次，寻找轨迹的一个东西，从起始位置出发，前进iAheadSpace个间距时距
            </summary>
            <param name="iAheadSpace"></param>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.Cell.Drive(SubSys_SimDriving.TrafficEntity)">
            <summary>
            该函数是仿真运行的核心函数
            </summary>
            <param name="rN"></param>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.Cell.Copy">
            <summary>
            创建浅表副本
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.Cell.GetEntityGap(System.Int32@,System.Int32@)">
            <summary>
            计算当前元胞可以前进的车头时距
            </summary>
            <param name="iEntityGap"></param>
            <param name="iToEntityGap"></param>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.Cell.GetTrackGap(SubSys_SimDriving.TrafficModel.XNode,System.Drawing.Point,System.Int32@)">
            <summary>
            计算元胞在交叉口内部可以走多少步
            </summary>
            <param name="rN"></param>
            <param name="ct"></param>
            <returns></returns>
        </member>
        <member name="P:SubSys_SimDriving.TrafficModel.Cell.Grid">
            <summary>
            实体的元胞空间坐标，过时的，建议用spacegrid代替
            </summary>
        </member>
        <member name="P:SubSys_SimDriving.TrafficModel.Cell.iSpaceIndex">
            <summary>
            相对于车道元胞空间第一个点的位置
            </summary>
        </member>
        <member name="P:SubSys_SimDriving.TrafficModel.Cell.SpatialGrid">
            <summary>
            元胞坐标系的三维坐标
            </summary>
        </member>
        <member name="F:SubSys_SimDriving.TrafficModel.CellGrid.iGridIndex">
            <summary>
            相对于车道第一个点的元胞个数.1为第一个点
            </summary>
        </member>
        <member name="T:SubSys_SimDriving.TrafficModel.CellSpace">
            <summary>
            装饰者模型，重新定义元胞空间，每个车道（道路）、交叉口（XNode）都有这个东西
            元胞空间要解决cell前后的空位置（车头时距、车后时距）计算问题
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.CellSpace.#ctor">
            <summary>
            禁止调用无参数构造函数
            </summary>
        </member>
        <member name="F:SubSys_SimDriving.TrafficModel.CellSpace._dicCellGrids">
             <summary>
            保存cellspacegrid的哈希表， key 用cell的xyz欧式坐标重写生成哈希值就是cell 坐标的xy，这样判断cell是否在元胞空间中就很简单,用dictionary.containskey。哈希表是为了快速判断元胞空间的状态，与cellspacequeue配合空间换时间。
             </summary>
        </member>
        <member name="F:SubSys_SimDriving.TrafficModel.CellSpace._slCellGrids">
            <summary>
            利用cellgrid的iGridindex，对字典中的保存的Grid,利用GirdIndex进行排序.GUI画图时候可以只调用一次。可用于GUI画图
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.CellSpace.Add(System.Int32,SubSys_SimDriving.TrafficModel.CellGrid)">
            <summary>
            添加元胞网格，元胞网格是组成车道的连续元胞点，字典的key是cellgrid的三坐标生成的。
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="P:SubSys_SimDriving.TrafficModel.CellSpace.Count">
            <summary>
            元胞网格cellgrid 的个数，这也是CellSpace可以容纳的最多的Cell数量。
            </summary>
        </member>
        <member name="T:SubSys_SimDriving.TrafficModel.AdjacencyTable`1">
            <summary>
            程序的GUI可能要求使用对象的坐标来查询路段顶点的位置，采用对象的position用作
            哈希值可以快速检索对象，也比使用list泛型高效,负责保存节点到仿真上下文中，
            不负责保存边到上下文中，边由network保存
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.AdjacencyTable`1.#ctor(System.Collections.Generic.Dictionary{`0,SubSys_SimDriving.TrafficModel.XNode})">
            <summary>
            使用SimDrivingContext 仿真上下文初始化保存路段节点的字典
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.AdjacencyTable`1.AddDirectedEdge(`0,SubSys_SimDriving.TrafficModel.Way)">
            <summary>
            添加有向边
            </summary>
            <param name="fromRoadNodeHash">要将将边添加到RoadNode哈希表中的RoadNode</param>
            <param name="Edge">要添加的边</param>
        </member>
        <member name="T:SubSys_SimDriving.TrafficModel.CellQueue">
            <summary>
            运行态使用的数据结构，主要是roadlane 内部使用
            设计为GUI驱动模型的接口类
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.CellQueue.Enqueue(SubSys_SimDriving.TrafficModel.Cell)">
            <summary>
            将元素插入队列末尾,并且更新元素指针
            </summary>
            <param name="ca"></param>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.CellQueue.Dequeue">
            <summary>
            返回队列的第一个元素，末尾为队列头，路段结尾处的元素
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.CellQueue.PeekLast">
            <summary>
            返回队列队列末尾的第一个元素，队列末尾处为最近进入的元素
            因此依照链表遍历就是从后往前遍历
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.CellQueue.PeekFirst">
            <summary>
            返回队列列首第一个元素，列首为最新进入的元素
            </summary>
            <returns></returns>
        </member>
        <member name="F:SubSys_SimDriving.TrafficModel.HashMatrix`1.iMaxWidth">
            <summary>
            最大六个车道，坐标远点是RoadNode的positon
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.HashMatrix`1.IsBlocked(System.Int32,System.Int32)">
            <summary>
            判断元胞是否被占用了
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.HashMatrix`1.Move(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            把元宝从o点移动到d点
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.HashMatrix`1.GetEnumerator">
            <summary>
            提供对存储元素的高效遍历
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.EntityIDManager`1.GetUniqueRoadNodeID">
            <summary>
            利用泛型之后ID 可以为string类型,由子类进行实现
            </summary>
            <returns></returns>
        </member>
        <member name="F:SubSys_SimDriving.TrafficModel.EntityType.Mobile">
            <summary>
            所有类型的车辆、行人的抽象表示
            </summary>
        </member>
        <member name="F:SubSys_SimDriving.TrafficModel.EntityType.SmallTruck">
            largePassangerCar
        </member>
        <member name="T:SubSys_SimDriving.TrafficModel.UpdateHandler">
            <summary>
            定义一个无参数的代理，需要的时候可以添加参数
            </summary>
        </member>
        <member name="T:SubSys_SimDriving.TrafficModel.LaneType">
            车道类型枚举,按照右行规则数值由小到大，所有车道最多三条
        </member>
        <member name="T:SubSys_SimDriving.Track">
            <summary>
            保存当前位置，起始位置，要去的位置的坐标信息，不同车辆（大车、中型车、小车）类型的Track可能不一样，其性质也不一样。
            </summary>
        </member>
        <member name="T:SubSys_SimDriving.TrafficModel.IRoad">
            <summary>
            路段接口，包括两个或者一个RoadEdge。两个RoadNode,
            他们之间的关系由工厂创建时候负责维护
            </summary>
        </member>
        <member name="P:SubSys_SimDriving.TrafficModel.IRoad.CtrWay">
            <summary>
            对向道路
            </summary>
        </member>
        <member name="P:SubSys_SimDriving.TrafficModel.IRoad.CtrRoadNode">
            <summary>
            对向节点
            </summary>
        </member>
        <member name="T:SubSys_SimDriving.TrafficModel.Road">
            <summary>
            包含两个way的道路。如果是单行路，只包含一个way
            </summary>
        </member>
        <member name="T:SubSys_SimDriving.TrafficModel.Way">
             <summary>
            Road的一条有向边，一条道路有两条边 一般来讲Edge的长度与Lane长度一样，但是环形交叉口，以及以后的拓展除外
             </summary>
        </member>
        <member name="T:SubSys_SimDriving.StaticEntity">
            <summary>
            表示交叉口XNode，路段way，车道Lane,道路Road的基类型
             智能体的更新使用了访问者模式
            </summary>
            <summary>
            _2015年1月新增的内容，原有的成员和方法将被部分废弃
            </summary>
        </member>
        <member name="F:SubSys_SimDriving.StaticEntity.iCurrTimeStep">
            <summary>
            该对象子类的更新时刻
            </summary>
        </member>
        <member name="F:SubSys_SimDriving.StaticEntity._mobilesInn">
            <summary>
            等待进入该车道的等待mobileEntity
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.StaticEntity.EnterInn(SubSys_SimDriving.MobileEntity)">
            <summary>
            用于处理暂时无法进入车道的车辆的临时队列，每个交叉口更新周期，须进入车道的元胞的缓存，在下一个道路更新周期，将缓存纳入车道。基类的方法，应当由子类。lane和Xnode重写；
            </summary>
            <param name="me"></param>
        </member>
        <member name="M:SubSys_SimDriving.StaticEntity.ServeMobiles">
            <summary>
            抽象方法、需要lane和xnode实现，将等待队列中的元胞添加到车道元胞中，新版由cellspace类实现该功能
            </summary>
        </member>
        <member name="F:SubSys_SimDriving.StaticEntity._Grids">
            <summary>
            cellspace 类型的元胞网格空间,，包含该lane的所有元素
            </summary>
        </member>
        <member name="P:SubSys_SimDriving.StaticEntity.Mobiles">
            <summary>
            用来保存元胞空间上的元胞（车道元胞为链表），交叉口元胞可能要用矩阵
            </summary>
        </member>
        <member name="F:SubSys_SimDriving.TrafficModel.Way.iTimeStep">
            <summary>
            当前所有路段的同步时刻
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.Way.#ctor(SubSys_SimDriving.TrafficModel.XNode,SubSys_SimDriving.TrafficModel.XNode)">
            <summary>
            强制先构造节点
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.Way.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            构造一条从from点到to点的道路
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.Way.AddLane(SubSys_SimDriving.TrafficModel.Lane)">
            <summary>
            由负责添加的类进行仿真上下文同步,内部进行了RoadLane注册
            </summary>
            <param name="rl"></param>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.Way.RemoveLane(SubSys_SimDriving.TrafficModel.Lane)">
            <summary>
            由负责删除的类进行仿真上下文同步
            </summary>
            <param name="rl"></param>
        </member>
        <member name="F:SubSys_SimDriving.TrafficModel.Way._lanes">
            <summary>
            存储边内部的车道roadlane，这个与simContext 不同
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.Way.UpdateTripCost">
            <summary>
            更新路段的交通成本
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.Way.GetHashCode">
            <summary>
            根据起始节点和结束节点计算边的哈希值
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.Way.GetHashCode(SubSys_SimDriving.TrafficModel.XNode,SubSys_SimDriving.TrafficModel.XNode)">
            <summary>
            静态的哈希函数，用来计算某条边的哈希值
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.Way.UpdateStatus">
            <summary>
            过时的，老旧的函数调用visitor 模式如vmsagent等。然后驱动元胞模型，然后调用所有服务
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.Way.OnStatusChanged">
            <summary>
            路段的OnStatusChanged委托给RoadLane处理
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.Way.ToVector">
            <summary>
            起点向量减去终点向量
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.Way.GetReverse">
            <summary>
            获取在一个Road内部的与RoadEdge相对应的反向路段
            </summary>
            <returns></returns>
        </member>
        <member name="F:SubSys_SimDriving.TrafficModel.Way.queWaitedCell">
            <summary>
            存储从交叉口roadNode进入路段的车辆，因为时间超前一个时间步长，
            需要放入队列中防止一个元胞先更新到路段，然后在路段内又更新一次更新两次
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.Way.ModifySignalGroup(SubSys_SimDriving.SignalLight,SubSys_SimDriving.TrafficModel.LaneType)">
            <summary>
            修改信号灯组合
            </summary>
            <param name="sl">新的信号灯</param>
            <param name="lt">要修改的车道类型</param>
        </member>
        <member name="F:SubSys_SimDriving.TrafficModel.Way.iSpeedLimit">
            <summary>
            路段限速
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.Way.Update">
            <summary>
            新版更新函数，替代updateStatus函数
            </summary>
        </member>
        <member name="P:SubSys_SimDriving.TrafficModel.Way.Lanes">
            <summary>
            道路（单向）所有车道的集合
            </summary>
        </member>
        <member name="P:SubSys_SimDriving.TrafficModel.Way.TripCost">
            <summary>
            路段的交通费用/成本
            </summary>
        </member>
        <member name="P:SubSys_SimDriving.TrafficModel.Way.Shape">
            <summary>
            过时的，需要重写
            </summary>
        </member>
        <member name="T:SubSys_SimDriving.TrafficModel.Lane">
            <summary>
            交通实体里面的车道,原来的lane数据结构
            </summary>
            <summary>
            2015年1月19日，对原来的lane进行升级。并保持和原有部分代码的兼容
            </summary>
        </member>
        <member name="F:SubSys_SimDriving.TrafficModel.Lane.iLaneCount">
            <summary>
            全局的车道计数器，用来初始化车道ID
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.Lane.CreateShape(SubSys_SimDriving.TrafficModel.EntityShape)">
            <summary>
            可以用新的元胞空间概念重写该函数
            </summary>
            <param name="eShape"></param>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.Lane.IsLaneBlocked(System.Int32)">
            <summary>
            没有调用，暂时不重写
            </summary>
            <param name="iAheadSpace"></param>
            <returns></returns>
        </member>
        <member name="F:SubSys_SimDriving.TrafficModel.Lane._ilastPos">
            <summary>
            已过时，车道的最后一个元胞的位置，应当是Y坐标
            </summary>
        </member>
        <member name="F:SubSys_SimDriving.TrafficModel.Lane.Rank">
             <summary>
            车道的排序，从内侧车道开始的第几个车道,用来对车道进行排序
             </summary>
        </member>
        <member name="F:SubSys_SimDriving.TrafficModel.Lane.SignalLight">
            <summary>
            分车道的信号
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.Lane.PlaySignal(System.Int32)">
            <summary>
            信号灯运行函数
            </summary>
            <param name="iCrtTimeStep"></param>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.Lane.#ctor(SubSys_SimDriving.TrafficModel.Way)">
            <summary>
            调用了两参数构造形
            </summary>
            <param name="re"></param>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.Lane.#ctor(SubSys_SimDriving.TrafficModel.Way,SubSys_SimDriving.TrafficModel.LaneType)">
            <summary>
            没有进行内部注册，应当由其管理者调用registere进行注册
            </summary>
            <param name="re"></param>
            <param name="lt"></param>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.Lane.AddCell(SubSys_SimDriving.TrafficModel.Cell)">
            <summary>
            过时的，这个函数需要修改
            </summary>
            <param name="ce"></param>
        </member>
        <member name="F:SubSys_SimDriving.TrafficModel.Lane._waitedQueue">
            <summary>
            等待进入该车道的等待队列
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.Lane.EnterWaitedQueue(SubSys_SimDriving.TrafficModel.Cell)">
            <summary>
            注册容器，新版将由cellspace替代
            </summary>
            <param name="ce"></param>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.Lane.DisposeWaitedQueue">
            <summary>
            将等待队列中的元胞添加到车道元胞中，新版由cellspace类实现该功能
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.Lane.UpdateStatus">
            <summary>
            没有调用visitor模式，调用所有附加的服务、处理等待队列
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.Lane.CompareTo(SubSys_SimDriving.TrafficModel.Lane,SubSys_SimDriving.TrafficModel.Lane)">
            <summary>
            静态方法
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="F:SubSys_SimDriving.TrafficModel.Lane._Grids">
            <summary>
            cellspace 类型的元胞网格空间,，包含该lane的所有元素
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.Lane.ServeMobiles">
            <summary>
            将等待队列中的元胞添加到车道元胞中，新版由cellspace类实现该功能
            </summary>
        </member>
        <member name="P:SubSys_SimDriving.TrafficModel.Lane.iLastPos">
            <summary>
            已过时，获取车道的最后一个元胞的位置，如果没有元胞则返回车道长度
            </summary>
        </member>
        <member name="P:SubSys_SimDriving.TrafficModel.Lane.SpaceCount">
            <summary>
            判断从道路起点处到有车的地方的元胞网格个数
            </summary>
        </member>
        <member name="T:SubSys_SimDriving.TrafficModel.RoadNet">
            <summary>
            应当实现为单例模式,RoadNetWork 是simContext的一部分
            RoadNetWork 应当承承担路网节点工厂的责任
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.RoadNet.#ctor">
             <summary>
            单例模式 防止直接调用接口生成该类,路网的边使用了simContext
            路网的节点表使用了simContext
             </summary>
        </member>
        <member name="F:SubSys_SimDriving.TrafficModel.RoadNet._roadNet">
            <summary>
            静态引用私有引用，只能通过getInstance创建类的实例
            </summary>
        </member>
        <member name="F:SubSys_SimDriving.TrafficModel.RoadNet.htWays">
            <summary>
            边字典使用仿真上下文
            </summary>
        </member>
        <member name="F:SubSys_SimDriving.TrafficModel.RoadNet.htLanes">
            <summary>
            获取所有的车道是否有必要，因为该部分已经存在了RoadEdge中了
            </summary>
        </member>
        <member name="F:SubSys_SimDriving.TrafficModel.RoadNet._atRoadNet">
            <summary>
            仅仅是邻接表里面的节点字典使用仿真上下文，边不使用节点内部的新字典
            </summary>
        </member>
        <member name="T:SubSys_SimDriving.TrafficModel.XNode">
            <summary>
            使用矩阵类型的结构意味着不支持五路交叉.环路的支持有待讨论，三路交叉是支持的
            表示道路交叉口的类
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.XNode.MakeCenterXY(SubSys_SimDriving.TrafficModel.Lane,System.Int32)">
            <summary>
            路段转化为中心坐标点,iahead  不应当小于零
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.XNode.IsBlocked(SubSys_SimDriving.TrafficModel.Lane,System.Int32)">
            <summary>
            判断指定车道前部第Ahead个位置处是否有元胞占据
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.XNode.IsBlocked(System.Drawing.Point)">
            <summary>
            判断指定车道前部第Ahead个位置处是否有元胞占据
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.XNode.BlockLane(SubSys_SimDriving.TrafficModel.Lane)">
            <summary>
            将车道堵塞
            </summary>
            <param name="rl"></param>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.XNode.UnblockLane(SubSys_SimDriving.TrafficModel.Lane)">
            <summary>
            将车道疏通
            </summary>
            <param name="rl"></param>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.XNode.IsLaneBlocked(SubSys_SimDriving.TrafficModel.Lane,System.Int32)">
            <summary>
            判断第x个车道前面是否有iAheadSpace个车辆
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.XNode.AddCell(SubSys_SimDriving.TrafficModel.Lane,System.Int32)">
            <summary>
            为红绿灯添加准备的方法，不是正常的元胞
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.XNode.AddCell(SubSys_SimDriving.TrafficModel.Cell)">
            <summary>
            在指定的点添加一个元胞，
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.XNode.MoveCell(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            要求两个参数是绝对坐标
            </summary>
            <param name="iOldPoint"></param>
            <param name="iNewPoint"></param>
            <returns></returns>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.XNode.RemoveCell(SubSys_SimDriving.TrafficModel.Lane,System.Int32)">
            <summary>
            按照指定的路段，路段前部的距离进行删除元胞
            </summary>
            <param name="rl">旋转坐标系所要用到的计算旋转角度的向量</param>
            <param name="iAheadSpace">前行距离数</param>
        </member>
        <member name="F:SubSys_SimDriving.TrafficModel.XNode.cells">
            <summary>
            新的roadnode的哈希散列值由其中心Position的哈希值和其ID构成
            </summary>
            <returns></returns>
        </member>
        <member name="F:SubSys_SimDriving.TrafficModel.XNode.dicEdge">
            <summary>
            存贮本节点所有出边的哈希表，键值是代表边的RoadEdge哈希，值是代表RoadEdge
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.XNode.GetEnumerator">
            <summary>
            提供对哈希矩阵内部元素的遍历
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.XNode.AddWay(SubSys_SimDriving.TrafficModel.Way)">
            <summary>
            注意在出边表中，保持roadedge的from字段是this节点，否则函数抛出异常
            </summary>
            <param name="roadEdge"></param>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.XNode.RemoveWay(SubSys_SimDriving.TrafficModel.Way)">
            <summary>
            找到边 从this到toNode节点的边，出边表
            </summary>
            <param name="fromRN"></param>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.XNode.FindWay(SubSys_SimDriving.TrafficModel.XNode)">
            <summary>
            查找方法，新的结构采用出边表
            </summary>
            <param name="toRoadNode">出节点</param>
            <returns></returns>
        </member>
        <member name="F:SubSys_SimDriving.TrafficModel.XNode.iRoadNodeID">
            <summary>
            控制RoadNodeID的数量
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.XNode.UpdateStatus">
            <summary>
            更新agent，更新元胞（驾驶），调用服务
            </summary>
        </member>
        <member name="F:SubSys_SimDriving.SignalLight.SigCycle">
            <summary>
            周期时长
            </summary>
        </member>
        <member name="F:SubSys_SimDriving.SignalLight.GreenLength">
            <summary>
            绿灯时间
            </summary>
        </member>
        <member name="F:SubSys_SimDriving.SignalLight.RedLength">
            <summary>
            红灯时间30
            </summary>
        </member>
        <member name="F:SubSys_SimDriving.SignalLight.YellowLength">
            <summary>
            黄灯时间，暂时不使用
            </summary>
        </member>
        <member name="F:SubSys_SimDriving.SignalLight.iOffSet">
            <summary>
            相位差，从仿真基准时间开始的时刻
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.SignalLight.#ctor">
            <summary>
            内部调用信号灯注册一下
            </summary>
        </member>
        <member name="T:SubSys_SimDriving.TrafficModel.SpeedLevel">
            <summary>
            总共十二级速度，根据元胞规则，最多一次前进12个元胞
            </summary>
        </member>
        <member name="F:SubSys_SimDriving.VMSEntity.Message">
            VMS显示的信息
        </member>
        <member name="F:SubSys_SimDriving.VMSEntity.iArm">
            用来确定vms作用的范围（元胞网格的长度）
        </member>
        <member name="T:SubSys_SimDriving.TrafficModel.CarInfo">
            <summary>
            程序的GUI可能要求使用对象的坐标来查询路段顶点的位置，采用对象的position用作
            </summary>
            <typeparam name="T">int</typeparam>
        </member>
        <member name="F:SubSys_SimDriving.TrafficModel.CarInfo.iCarHashCode">
            <summary>
            车辆的哈希表
            </summary>
        </member>
        <member name="T:SubSys_SimDriving.TrafficModel.EntityShape">
            <summary>
            装饰者
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.EntityShape.Add(SubSys_MathUtility.OxyzPointF)">
            <summary>
            重载一个浮点型的Add方法
            </summary>
            <param name="op"></param>
        </member>
        <member name="F:SubSys_SimDriving.TrafficModel.RunCtxParam.iMoveStepY">
            <summary>
            Y坐标表示前进的距离，x坐标表示前进的车道
            </summary>
        </member>
        <member name="T:SubSys_SimDriving.TrafficModel.RunCtx">
            <summary>
            元胞运行的上下文信息，如前后车头时距，左右车头时距，
            车道编号、左右车道，运行的地点（路段或者交叉口）
            </summary>
        </member>
        <member name="F:SubSys_SimDriving.TrafficModel.RunCtx.iSafetyGap">
            <summary>
            安全车头时距
            </summary>
        </member>
        <member name="M:SubSys_SimDriving.TrafficModel.RunCtx.#ctor(SubSys_SimDriving.TrafficEntity,SubSys_SimDriving.TrafficModel.Cell)">
            <summary>
            仅仅初始化不做赋值
            </summary>
            <param name="roadE"></param>
            <param name="ce"></param>
        </member>
        <member name="F:SubSys_SimDriving.TrafficModel.ModelSetting.dRate">
            <summary>
            交叉口的最大元胞数，等于Roadedge内部可以容纳的最大车道数量
            </summary>
        </member>
    </members>
</doc>
